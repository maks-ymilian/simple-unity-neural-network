#pragma kernel CSMain

float2 from;
float2 to;

uint textureSize;

RWTexture2D<float> outTexture;

//https://stackoverflow.com/a/1501725
float minimum_distance(float2 v, float2 w, float2 p)
{
  // Return minimum distance between line segment vw and point p
    float2 w_v = w - v;
    float l2 = dot(w_v, w_v);
    if (l2 == 0.0)
        return distance(p, v); // v == w case
  // Consider the line extending the segment, parameterized as v + t (w - v).
  // We find projection of point p onto the line. 
  // It falls where t = [(p-v) . (w-v)] / |w-v|^2
  // We clamp t from [0,1] to handle points outside the segment vw.
    float t = max(0, min(1, dot(p - v, w - v) / l2));
    float2 projection = v + t * (w - v); // Projection falls on the segment
    return distance(p, projection);
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= textureSize || id.y >= textureSize)
        return;
    
    float2 normalizedId = float2(id.xy) / textureSize;
    
    float distance = minimum_distance(from, to, normalizedId);
    
    float thickness = 0.05f;
    float color = saturate(lerp(1, 0, distance / thickness - 0.5f));
    
    float currentColor = outTexture[id.xy];
    
    if (currentColor < color)
        outTexture[id.xy] = color;
}